/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as IconImport } from './routes/icon'
import { Route as NestingImport } from './routes/_nesting'
import { Route as AuthImport } from './routes/_auth'
import { Route as PageImport } from './routes/$page'
import { Route as IndexImport } from './routes/index'
import { Route as TableIndexImport } from './routes/table/index'
import { Route as AboutIndexImport } from './routes/about/index'
import { Route as UserPagerImport } from './routes/user/pager'
import { Route as UserIdImport } from './routes/user/$id'
import { Route as AboutIdImport } from './routes/about/$id'
import { Route as NestingLayoutTestImport } from './routes/_nesting/layout-test'
import { Route as NestingLayoutImport } from './routes/_nesting/_layout'
import { Route as AuthPage2Import } from './routes/_auth/page2'
import { Route as AuthPageImport } from './routes/_auth/page'
import { Route as groupGroup3Import } from './routes/(group)/group3'
import { Route as groupGroup2Import } from './routes/(group)/group2'
import { Route as AboutNameIndexImport } from './routes/about/name/index'
import { Route as AboutValueIndexImport } from './routes/about/$value/index'
import { Route as AboutNameNameImport } from './routes/about/name/$name'
import { Route as AboutValueCreateImport } from './routes/about/$value/create'
import { Route as NestingLayoutTest2Import } from './routes/_nesting/_layout/test2'
import { Route as NestingLayoutTest3IdImport } from './routes/_nesting/_layout/test3.$id'

// Create Virtual Routes

const UserLazyImport = createFileRoute('/user')()
const StoreLazyImport = createFileRoute('/store')()
const UserIndexLazyImport = createFileRoute('/user/')()

// Create/Update Routes

const UserLazyRoute = UserLazyImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/user.lazy').then((d) => d.Route))

const StoreLazyRoute = StoreLazyImport.update({
  id: '/store',
  path: '/store',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/store.lazy').then((d) => d.Route))

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IconRoute = IconImport.update({
  id: '/icon',
  path: '/icon',
  getParentRoute: () => rootRoute,
} as any)

const NestingRoute = NestingImport.update({
  id: '/_nesting',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const PageRoute = PageImport.update({
  id: '/$page',
  path: '/$page',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserIndexLazyRoute = UserIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UserLazyRoute,
} as any).lazy(() => import('./routes/user/index.lazy').then((d) => d.Route))

const TableIndexRoute = TableIndexImport.update({
  id: '/table/',
  path: '/table/',
  getParentRoute: () => rootRoute,
} as any)

const AboutIndexRoute = AboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any)

const UserPagerRoute = UserPagerImport.update({
  id: '/pager',
  path: '/pager',
  getParentRoute: () => UserLazyRoute,
} as any)

const UserIdRoute = UserIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => UserLazyRoute,
} as any)

const AboutIdRoute = AboutIdImport.update({
  id: '/about/$id',
  path: '/about/$id',
  getParentRoute: () => rootRoute,
} as any)

const NestingLayoutTestRoute = NestingLayoutTestImport.update({
  id: '/layout-test',
  path: '/layout-test',
  getParentRoute: () => NestingRoute,
} as any)

const NestingLayoutRoute = NestingLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => NestingRoute,
} as any)

const AuthPage2Route = AuthPage2Import.update({
  id: '/page2',
  path: '/page2',
  getParentRoute: () => AuthRoute,
} as any)

const AuthPageRoute = AuthPageImport.update({
  id: '/page',
  path: '/page',
  getParentRoute: () => AuthRoute,
} as any)

const groupGroup3Route = groupGroup3Import.update({
  id: '/(group)/group3',
  path: '/group3',
  getParentRoute: () => rootRoute,
} as any)

const groupGroup2Route = groupGroup2Import.update({
  id: '/(group)/group2',
  path: '/group2',
  getParentRoute: () => rootRoute,
} as any)

const AboutNameIndexRoute = AboutNameIndexImport.update({
  id: '/about/name/',
  path: '/about/name/',
  getParentRoute: () => rootRoute,
} as any)

const AboutValueIndexRoute = AboutValueIndexImport.update({
  id: '/about/$value/',
  path: '/about/$value/',
  getParentRoute: () => rootRoute,
} as any)

const AboutNameNameRoute = AboutNameNameImport.update({
  id: '/about/name/$name',
  path: '/about/name/$name',
  getParentRoute: () => rootRoute,
} as any)

const AboutValueCreateRoute = AboutValueCreateImport.update({
  id: '/about/$value/create',
  path: '/about/$value/create',
  getParentRoute: () => rootRoute,
} as any)

const NestingLayoutTest2Route = NestingLayoutTest2Import.update({
  id: '/test2',
  path: '/test2',
  getParentRoute: () => NestingLayoutRoute,
} as any)

const NestingLayoutTest3IdRoute = NestingLayoutTest3IdImport.update({
  id: '/test3/$id',
  path: '/test3/$id',
  getParentRoute: () => NestingLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$page': {
      id: '/$page'
      path: '/$page'
      fullPath: '/$page'
      preLoaderRoute: typeof PageImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_nesting': {
      id: '/_nesting'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof NestingImport
      parentRoute: typeof rootRoute
    }
    '/icon': {
      id: '/icon'
      path: '/icon'
      fullPath: '/icon'
      preLoaderRoute: typeof IconImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/store': {
      id: '/store'
      path: '/store'
      fullPath: '/store'
      preLoaderRoute: typeof StoreLazyImport
      parentRoute: typeof rootRoute
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserLazyImport
      parentRoute: typeof rootRoute
    }
    '/(group)/group2': {
      id: '/(group)/group2'
      path: '/group2'
      fullPath: '/group2'
      preLoaderRoute: typeof groupGroup2Import
      parentRoute: typeof rootRoute
    }
    '/(group)/group3': {
      id: '/(group)/group3'
      path: '/group3'
      fullPath: '/group3'
      preLoaderRoute: typeof groupGroup3Import
      parentRoute: typeof rootRoute
    }
    '/_auth/page': {
      id: '/_auth/page'
      path: '/page'
      fullPath: '/page'
      preLoaderRoute: typeof AuthPageImport
      parentRoute: typeof AuthImport
    }
    '/_auth/page2': {
      id: '/_auth/page2'
      path: '/page2'
      fullPath: '/page2'
      preLoaderRoute: typeof AuthPage2Import
      parentRoute: typeof AuthImport
    }
    '/_nesting/_layout': {
      id: '/_nesting/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof NestingLayoutImport
      parentRoute: typeof NestingImport
    }
    '/_nesting/layout-test': {
      id: '/_nesting/layout-test'
      path: '/layout-test'
      fullPath: '/layout-test'
      preLoaderRoute: typeof NestingLayoutTestImport
      parentRoute: typeof NestingImport
    }
    '/about/$id': {
      id: '/about/$id'
      path: '/about/$id'
      fullPath: '/about/$id'
      preLoaderRoute: typeof AboutIdImport
      parentRoute: typeof rootRoute
    }
    '/user/$id': {
      id: '/user/$id'
      path: '/$id'
      fullPath: '/user/$id'
      preLoaderRoute: typeof UserIdImport
      parentRoute: typeof UserLazyImport
    }
    '/user/pager': {
      id: '/user/pager'
      path: '/pager'
      fullPath: '/user/pager'
      preLoaderRoute: typeof UserPagerImport
      parentRoute: typeof UserLazyImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexImport
      parentRoute: typeof rootRoute
    }
    '/table/': {
      id: '/table/'
      path: '/table'
      fullPath: '/table'
      preLoaderRoute: typeof TableIndexImport
      parentRoute: typeof rootRoute
    }
    '/user/': {
      id: '/user/'
      path: '/'
      fullPath: '/user/'
      preLoaderRoute: typeof UserIndexLazyImport
      parentRoute: typeof UserLazyImport
    }
    '/_nesting/_layout/test2': {
      id: '/_nesting/_layout/test2'
      path: '/test2'
      fullPath: '/test2'
      preLoaderRoute: typeof NestingLayoutTest2Import
      parentRoute: typeof NestingLayoutImport
    }
    '/about/$value/create': {
      id: '/about/$value/create'
      path: '/about/$value/create'
      fullPath: '/about/$value/create'
      preLoaderRoute: typeof AboutValueCreateImport
      parentRoute: typeof rootRoute
    }
    '/about/name/$name': {
      id: '/about/name/$name'
      path: '/about/name/$name'
      fullPath: '/about/name/$name'
      preLoaderRoute: typeof AboutNameNameImport
      parentRoute: typeof rootRoute
    }
    '/about/$value/': {
      id: '/about/$value/'
      path: '/about/$value'
      fullPath: '/about/$value'
      preLoaderRoute: typeof AboutValueIndexImport
      parentRoute: typeof rootRoute
    }
    '/about/name/': {
      id: '/about/name/'
      path: '/about/name'
      fullPath: '/about/name'
      preLoaderRoute: typeof AboutNameIndexImport
      parentRoute: typeof rootRoute
    }
    '/_nesting/_layout/test3/$id': {
      id: '/_nesting/_layout/test3/$id'
      path: '/test3/$id'
      fullPath: '/test3/$id'
      preLoaderRoute: typeof NestingLayoutTest3IdImport
      parentRoute: typeof NestingLayoutImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthPageRoute: typeof AuthPageRoute
  AuthPage2Route: typeof AuthPage2Route
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthPageRoute: AuthPageRoute,
  AuthPage2Route: AuthPage2Route,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface NestingLayoutRouteChildren {
  NestingLayoutTest2Route: typeof NestingLayoutTest2Route
  NestingLayoutTest3IdRoute: typeof NestingLayoutTest3IdRoute
}

const NestingLayoutRouteChildren: NestingLayoutRouteChildren = {
  NestingLayoutTest2Route: NestingLayoutTest2Route,
  NestingLayoutTest3IdRoute: NestingLayoutTest3IdRoute,
}

const NestingLayoutRouteWithChildren = NestingLayoutRoute._addFileChildren(
  NestingLayoutRouteChildren,
)

interface NestingRouteChildren {
  NestingLayoutRoute: typeof NestingLayoutRouteWithChildren
  NestingLayoutTestRoute: typeof NestingLayoutTestRoute
}

const NestingRouteChildren: NestingRouteChildren = {
  NestingLayoutRoute: NestingLayoutRouteWithChildren,
  NestingLayoutTestRoute: NestingLayoutTestRoute,
}

const NestingRouteWithChildren =
  NestingRoute._addFileChildren(NestingRouteChildren)

interface UserLazyRouteChildren {
  UserIdRoute: typeof UserIdRoute
  UserPagerRoute: typeof UserPagerRoute
  UserIndexLazyRoute: typeof UserIndexLazyRoute
}

const UserLazyRouteChildren: UserLazyRouteChildren = {
  UserIdRoute: UserIdRoute,
  UserPagerRoute: UserPagerRoute,
  UserIndexLazyRoute: UserIndexLazyRoute,
}

const UserLazyRouteWithChildren = UserLazyRoute._addFileChildren(
  UserLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$page': typeof PageRoute
  '': typeof NestingLayoutRouteWithChildren
  '/icon': typeof IconRoute
  '/login': typeof LoginRoute
  '/store': typeof StoreLazyRoute
  '/user': typeof UserLazyRouteWithChildren
  '/group2': typeof groupGroup2Route
  '/group3': typeof groupGroup3Route
  '/page': typeof AuthPageRoute
  '/page2': typeof AuthPage2Route
  '/layout-test': typeof NestingLayoutTestRoute
  '/about/$id': typeof AboutIdRoute
  '/user/$id': typeof UserIdRoute
  '/user/pager': typeof UserPagerRoute
  '/about': typeof AboutIndexRoute
  '/table': typeof TableIndexRoute
  '/user/': typeof UserIndexLazyRoute
  '/test2': typeof NestingLayoutTest2Route
  '/about/$value/create': typeof AboutValueCreateRoute
  '/about/name/$name': typeof AboutNameNameRoute
  '/about/$value': typeof AboutValueIndexRoute
  '/about/name': typeof AboutNameIndexRoute
  '/test3/$id': typeof NestingLayoutTest3IdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$page': typeof PageRoute
  '': typeof NestingLayoutRouteWithChildren
  '/icon': typeof IconRoute
  '/login': typeof LoginRoute
  '/store': typeof StoreLazyRoute
  '/group2': typeof groupGroup2Route
  '/group3': typeof groupGroup3Route
  '/page': typeof AuthPageRoute
  '/page2': typeof AuthPage2Route
  '/layout-test': typeof NestingLayoutTestRoute
  '/about/$id': typeof AboutIdRoute
  '/user/$id': typeof UserIdRoute
  '/user/pager': typeof UserPagerRoute
  '/about': typeof AboutIndexRoute
  '/table': typeof TableIndexRoute
  '/user': typeof UserIndexLazyRoute
  '/test2': typeof NestingLayoutTest2Route
  '/about/$value/create': typeof AboutValueCreateRoute
  '/about/name/$name': typeof AboutNameNameRoute
  '/about/$value': typeof AboutValueIndexRoute
  '/about/name': typeof AboutNameIndexRoute
  '/test3/$id': typeof NestingLayoutTest3IdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$page': typeof PageRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_nesting': typeof NestingRouteWithChildren
  '/icon': typeof IconRoute
  '/login': typeof LoginRoute
  '/store': typeof StoreLazyRoute
  '/user': typeof UserLazyRouteWithChildren
  '/(group)/group2': typeof groupGroup2Route
  '/(group)/group3': typeof groupGroup3Route
  '/_auth/page': typeof AuthPageRoute
  '/_auth/page2': typeof AuthPage2Route
  '/_nesting/_layout': typeof NestingLayoutRouteWithChildren
  '/_nesting/layout-test': typeof NestingLayoutTestRoute
  '/about/$id': typeof AboutIdRoute
  '/user/$id': typeof UserIdRoute
  '/user/pager': typeof UserPagerRoute
  '/about/': typeof AboutIndexRoute
  '/table/': typeof TableIndexRoute
  '/user/': typeof UserIndexLazyRoute
  '/_nesting/_layout/test2': typeof NestingLayoutTest2Route
  '/about/$value/create': typeof AboutValueCreateRoute
  '/about/name/$name': typeof AboutNameNameRoute
  '/about/$value/': typeof AboutValueIndexRoute
  '/about/name/': typeof AboutNameIndexRoute
  '/_nesting/_layout/test3/$id': typeof NestingLayoutTest3IdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$page'
    | ''
    | '/icon'
    | '/login'
    | '/store'
    | '/user'
    | '/group2'
    | '/group3'
    | '/page'
    | '/page2'
    | '/layout-test'
    | '/about/$id'
    | '/user/$id'
    | '/user/pager'
    | '/about'
    | '/table'
    | '/user/'
    | '/test2'
    | '/about/$value/create'
    | '/about/name/$name'
    | '/about/$value'
    | '/about/name'
    | '/test3/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$page'
    | ''
    | '/icon'
    | '/login'
    | '/store'
    | '/group2'
    | '/group3'
    | '/page'
    | '/page2'
    | '/layout-test'
    | '/about/$id'
    | '/user/$id'
    | '/user/pager'
    | '/about'
    | '/table'
    | '/user'
    | '/test2'
    | '/about/$value/create'
    | '/about/name/$name'
    | '/about/$value'
    | '/about/name'
    | '/test3/$id'
  id:
    | '__root__'
    | '/'
    | '/$page'
    | '/_auth'
    | '/_nesting'
    | '/icon'
    | '/login'
    | '/store'
    | '/user'
    | '/(group)/group2'
    | '/(group)/group3'
    | '/_auth/page'
    | '/_auth/page2'
    | '/_nesting/_layout'
    | '/_nesting/layout-test'
    | '/about/$id'
    | '/user/$id'
    | '/user/pager'
    | '/about/'
    | '/table/'
    | '/user/'
    | '/_nesting/_layout/test2'
    | '/about/$value/create'
    | '/about/name/$name'
    | '/about/$value/'
    | '/about/name/'
    | '/_nesting/_layout/test3/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PageRoute: typeof PageRoute
  AuthRoute: typeof AuthRouteWithChildren
  NestingRoute: typeof NestingRouteWithChildren
  IconRoute: typeof IconRoute
  LoginRoute: typeof LoginRoute
  StoreLazyRoute: typeof StoreLazyRoute
  UserLazyRoute: typeof UserLazyRouteWithChildren
  groupGroup2Route: typeof groupGroup2Route
  groupGroup3Route: typeof groupGroup3Route
  AboutIdRoute: typeof AboutIdRoute
  AboutIndexRoute: typeof AboutIndexRoute
  TableIndexRoute: typeof TableIndexRoute
  AboutValueCreateRoute: typeof AboutValueCreateRoute
  AboutNameNameRoute: typeof AboutNameNameRoute
  AboutValueIndexRoute: typeof AboutValueIndexRoute
  AboutNameIndexRoute: typeof AboutNameIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PageRoute: PageRoute,
  AuthRoute: AuthRouteWithChildren,
  NestingRoute: NestingRouteWithChildren,
  IconRoute: IconRoute,
  LoginRoute: LoginRoute,
  StoreLazyRoute: StoreLazyRoute,
  UserLazyRoute: UserLazyRouteWithChildren,
  groupGroup2Route: groupGroup2Route,
  groupGroup3Route: groupGroup3Route,
  AboutIdRoute: AboutIdRoute,
  AboutIndexRoute: AboutIndexRoute,
  TableIndexRoute: TableIndexRoute,
  AboutValueCreateRoute: AboutValueCreateRoute,
  AboutNameNameRoute: AboutNameNameRoute,
  AboutValueIndexRoute: AboutValueIndexRoute,
  AboutNameIndexRoute: AboutNameIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$page",
        "/_auth",
        "/_nesting",
        "/icon",
        "/login",
        "/store",
        "/user",
        "/(group)/group2",
        "/(group)/group3",
        "/about/$id",
        "/about/",
        "/table/",
        "/about/$value/create",
        "/about/name/$name",
        "/about/$value/",
        "/about/name/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$page": {
      "filePath": "$page.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/page",
        "/_auth/page2"
      ]
    },
    "/_nesting": {
      "filePath": "_nesting.tsx",
      "children": [
        "/_nesting/_layout",
        "/_nesting/layout-test"
      ]
    },
    "/icon": {
      "filePath": "icon.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/store": {
      "filePath": "store.lazy.tsx"
    },
    "/user": {
      "filePath": "user.lazy.tsx",
      "children": [
        "/user/$id",
        "/user/pager",
        "/user/"
      ]
    },
    "/(group)/group2": {
      "filePath": "(group)/group2.tsx"
    },
    "/(group)/group3": {
      "filePath": "(group)/group3.tsx"
    },
    "/_auth/page": {
      "filePath": "_auth/page.tsx",
      "parent": "/_auth"
    },
    "/_auth/page2": {
      "filePath": "_auth/page2.tsx",
      "parent": "/_auth"
    },
    "/_nesting/_layout": {
      "filePath": "_nesting/_layout.tsx",
      "parent": "/_nesting",
      "children": [
        "/_nesting/_layout/test2",
        "/_nesting/_layout/test3/$id"
      ]
    },
    "/_nesting/layout-test": {
      "filePath": "_nesting/layout-test.tsx",
      "parent": "/_nesting"
    },
    "/about/$id": {
      "filePath": "about/$id.tsx"
    },
    "/user/$id": {
      "filePath": "user/$id.tsx",
      "parent": "/user"
    },
    "/user/pager": {
      "filePath": "user/pager.tsx",
      "parent": "/user"
    },
    "/about/": {
      "filePath": "about/index.tsx"
    },
    "/table/": {
      "filePath": "table/index.tsx"
    },
    "/user/": {
      "filePath": "user/index.lazy.tsx",
      "parent": "/user"
    },
    "/_nesting/_layout/test2": {
      "filePath": "_nesting/_layout/test2.tsx",
      "parent": "/_nesting/_layout"
    },
    "/about/$value/create": {
      "filePath": "about/$value/create.tsx"
    },
    "/about/name/$name": {
      "filePath": "about/name/$name.tsx"
    },
    "/about/$value/": {
      "filePath": "about/$value/index.tsx"
    },
    "/about/name/": {
      "filePath": "about/name/index.tsx"
    },
    "/_nesting/_layout/test3/$id": {
      "filePath": "_nesting/_layout/test3.$id.tsx",
      "parent": "/_nesting/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
